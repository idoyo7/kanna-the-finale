apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: kanna
  namespace: kanna
  annotations:
    # Argo Rollouts Slack 알림 구독 설정
    notifications.argoproj.io/subscribe.on-rollout-step-completed.slack: "#update"
    notifications.argoproj.io/subscribe.on-rollout-completed.slack: "#update"
    notifications.argoproj.io/subscribe.on-rollout-aborted.slack: "#update"
    notifications.argoproj.io/subscribe.on-rollout-updated.slack: "#update"
spec:
  replicas: 4
  revisionHistoryLimit: 3
  strategy:
    canary:
      # Canary 배포 전략: 15% 트래픽으로 analysis 수행 후 100%
      analysis:
        templates:
        - templateName: success-rate
        startingStep: 1  # 첫 번째 단계부터 analysis 시작
        args:
        - name: service-name
          value: kanna-service
      steps:
      - setWeight: 15
      - pause: {duration: 30s}
      - analysis:
          templates:
          - templateName: success-rate
          args:
          - name: service-name
            value: kanna-service
      - setWeight: 100
  selector:
    matchLabels:
      app: kanna
  template:
    metadata:
      labels:
        app: kanna
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kanna
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kanna
        image: idoyo7/kanna:a0a02a
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        startupProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3 
